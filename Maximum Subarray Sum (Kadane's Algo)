--Brute Force
int maxSum = Integer.MIN_VALUE;
for(int i=0; i<nums.length; i++) {
  for(int j=i; j<nums.length; j++) {
    int sum=0;
    for(int k=i; k<=j; k++) {
      sum += nums[k];
    }
    maxSum = Math.max(sum, maxSum);
  }
}
return maxSum;

--Better Approach
int maxSum = Integer.MIN_VALUE;
for(int i=0; i<n; i++) {
  int sum=0;
  for(int j=i; j<n; j++) {
    sum += arr[j];
    maxSum = Math.max(sum, maxSum);
  }
}
return maxSum;

--Optiomal Approach (Kadane's Algo)
int maxSum = Integer.MIN_VALUE;
        int sum = 0;
        for(int i=0; i<nums.length; i++) {
            sum += nums[i];
            if(sum > maxSum) {
                maxSum = sum;
            }
            else if (sum < 0) {
                sum = 0;
            }
        }
        return maxSum;
--Follow up (Printing the max subarray)
int maxSum = Integer.MIN_VALUE;
int sum = 0;
int startIdx = -1, endIdx = -1;
for(int i=0; i<n; i++) {
  if(sum == 0) {
  int start = i;
  }
  if( sum > maxSum) {
    maxSum = sum;
    startIdx = start;
    endIdx = i;
  }
  if(sum < 0) {
    sum = 0;
  }
}
